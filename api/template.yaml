AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ImageUri:
    Type: String
    Description: The URI of the container image including the digest
  MongoUsername:
    Type: String
    Description: MongoDB username
  MongoPassword:
    Type: String
    Description: MongoDB password
  MongoHost:
    Type: String
    Description: MongoDB host
  MongoDbName:
    Type: String
    Description: MongoDB database name

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role:
        Fn::GetAtt: LambdaExecutionRole.Arn
      Code:
        ImageUri: !Ref ImageUri
      PackageType: Image
      Timeout: 15
      MemorySize: 256
      Environment:
        Variables:
          MONGO_USERNAME: !Ref MongoUsername
          MONGO_PASSWORD: !Ref MongoPassword
          MONGO_HOST: !Ref MongoHost
          MONGO_DB_NAME: !Ref MongoDbName

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref AWS::StackName
      ProtocolType: HTTP

  # API Gateway Integration
  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  # API Gateway Route
  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${ApiIntegration}"

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref ApiGateway
    DependsOn:
    - ApiRoute

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      DeploymentId: !Ref ApiDeployment

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

Outputs:
  ApiEndpoint:
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ApiEndpoint
    Value:
      Fn::GetAtt:
        - ApiGateway
        - ApiEndpoint